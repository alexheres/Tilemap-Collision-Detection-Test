#include "TileMap.h"
#include "Quadtree.h"
#include <SFML/Graphics/Sprite.hpp>
#include <iostream>

#include <SFML/Graphics/RenderWindow.hpp>
#include <SFML/Window/Event.hpp>

int main()
{
	// create the window
	sf::RenderWindow window(sf::VideoMode(1024, 768), "Tilemap");

	// define the level with an array of tile indices
	const int level[] =
	{
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,
		0,0,0,7,7,0,0,0,7,7,7,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,7,0,0,0,
		0,0,7,7,0,0,0,0,0,7,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,7,0,0,
		0,0,7,7,0,0,0,0,0,7,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,0,0,
		0,0,7,7,7,0,0,0,7,7,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,0,0,
		0,0,7,7,7,7,7,7,7,7,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,0,0,
		0,0,7,7,-1,-1,-1,-1,-1,7,7,7,7,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,0,0,
		0,0,7,-1,-1,-1,-1,-1,-1,-1,7,8,8,8,8,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,8,8,8,8,8,
		0,0,7,-1,-1,-1,-1,-1,-1,-1,7,8,7,7,7,8,8,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,0,0,
		0,0,7,-1,-1,-1,-1,-1,-1,-1,7,8,7,0,7,7,7,8,8,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,0,0,
		0,0,7,-1,-1,7,7,7,-1,-1,7,8,7,0,0,0,7,7,8,8,8,7,9,9,9,9,9,9,9,9,9,9,9,7,8,8,8,8,8,8,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,0,0,
		0,0,7,-1,-1,-1,-1,-1,-1,-1,7,8,7,7,7,7,7,7,7,8,8,8,8,7,10,10,10,10,10,10,10,10,10,10,10,10,10,7,8,8,8,8,8,8,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,0,0,
		0,0,7,-1,-1,-1,-1,-1,-1,-1,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,7,10,10,10,10,10,10,10,10,10,7,8,8,8,8,8,8,8,8,8,8,8,8,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,0,0,
		0,0,7,-1,-1,-1,-1,-1,-1,-1,7,7,7,7,0,0,7,7,7,7,7,7,7,7,7,7,7,7,10,10,10,10,10,10,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,0,0,
		0,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,0,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,8,8,8,8,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,0,0,
		0,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,7,7,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,0,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,0,0,
		0,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,8,8,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,0,0,
		8,8,8,8,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,0,0,
		0,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,0,0,
		0,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,8,8,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,0,0,
		0,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,0,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,5,6,0,0,0,0,0,7,0,0,
		0,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,8,8,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,7,9,9,9,9,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,5,6,0,0,0,0,0,0,0,7,0,0,
		0,0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,7,8,8,8,8,8,8,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,5,6,0,0,0,0,0,0,0,0,0,7,0,0,
		0,0,7,1,-1,-1,-1,-1,-1,-1,-1,2,7,8,8,8,8,7,1,-1,-1,-1,-1,-1,-1,2,7,10,10,10,10,10,10,10,10,7,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,5,6,0,0,0,0,0,0,0,0,0,0,0,7,0,0,
		0,0,7,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,7,0,0,
		0,0,7,7,8,8,8,8,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,7,8,8,8,8,8,8,8,7,7,0,0,
		0,0,0,7,7,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,7,7,0,0,0,
		0,0,0,0,7,8,8,8,8,8,8,8,8,8,8,8,8,8,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,7,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

	};

	// create the tilemap from the level definition
	TileMap map;
	if (!map.load("test_tileset.png", sf::Vector2u(32, 32), level, 64, 32))
		return -1;
	
	sf::Texture mouseTex;
	mouseTex.loadFromFile("testTile.png");
	sf::Sprite mouseV(mouseTex);
	vector<Tile*> inactiveTiles;

	sf::Clock clock;
	clock.restart();

	// run the main loop
	while (window.isOpen())
	{
		std::cout << "Frames per Second = " << 1 / clock.restart().asSeconds() << std::endl;

		// handle events, set view, and mousePosition
		sf::Event event;
		sf::View view = window.getView();
		sf::Vector2i pixelPos = sf::Mouse::getPosition(window);
		sf::Vector2f mousePosition = window.mapPixelToCoords(pixelPos, view);
		
		sf::FloatRect screen(sf::Vector2f(window.getView().getCenter().x - (window.getView().getSize().x) / 2,
										  window.getView().getCenter().y - (window.getView().getSize().y) / 2),
							 window.getView().getSize());

		//Quadtree tree(screen.left/* - 32.0f*/, screen.top/* - 32.0f*/, screen.width/* + 64.0f*/, screen.height/* + 64.0f*/, 0);
		Quadtree tree(0.0f, 0.0f, map.levelWidth * 32.0f, map.levelHeight * 32.0f, 0);

		mouseV.setPosition(sf::Vector2f(mousePosition.x - 16.f, mousePosition.y - 16.f));
		while (window.pollEvent(event))
		{
			switch (event.type)
			{
				case sf::Event::Closed:
					window.close();
					break;

				case sf::Event::KeyPressed:
					if (event.key.code == sf::Keyboard::W)
					{
						view.move(sf::Vector2f(0.f, -16.f));
					}
					if (event.key.code == sf::Keyboard::A)
					{
						view.move(sf::Vector2f(-16.f, 0.f));
					}
					if (event.key.code == sf::Keyboard::S)
					{
						view.move(sf::Vector2f(0.f, 16.f));
					}
					if (event.key.code == sf::Keyboard::D)
					{
						view.move(sf::Vector2f(16.f, 0.f));
					}
					if (event.key.code == sf::Keyboard::Q)
					{
						view.zoom(0.75f);
					}
					if (event.key.code == sf::Keyboard::E)
					{
						view.zoom(1.25f);
					}
					if (event.key.code == sf::Keyboard::Escape)
					{
						window.close();
					}
					if (event.key.code == sf::Keyboard::Space)
					{
						
					}
					if (event.key.code == sf::Keyboard::LControl)
					{

					}
					break;

				case sf::Event::MouseButtonPressed:	

					break;
			}

		}
		
		
		window.clear();

		for (int i = 0; i < map.mWallTiles.size(); i++)
		{
			if (tree.contains(sf::FloatRect(map.mWallTiles[i]->mVertices[0].position.x,
				map.mWallTiles[i]->mVertices[0].position.y,
				map.tileSize.x,
				map.tileSize.y)))
			{
				tree.AddObject(map.mWallTiles[i]);
				//window.draw(map.mTiles[i].mVertices, 4, sf::Quads);
			}
		}


	

		vector<Tile*> returnTiles = tree.GetObjectsAt(mouseV.getGlobalBounds());

		std::cout << "Tiles checked for collision: " << returnTiles.size() << std::endl;
		
		for (int i = 0; i < returnTiles.size(); i++)
		{
			
			//window.draw(returnTiles[i]->mHitbox);

			if (mouseV.getGlobalBounds().intersects(sf::FloatRect(returnTiles[i]->mVertices[0].position.x,
																  returnTiles[i]->mVertices[0].position.y,
																  map.tileSize.x,
																  map.tileSize.y)))
			{
					returnTiles[i]->deactivate();
					inactiveTiles.push_back(returnTiles[i]);
			}
		}
	
		window.draw(map);
		tree.Draw(window);
		window.draw(mouseV);

		window.setView(view);

		// highlight all tiles checked for collision
		for (int i = 0; i < returnTiles.size(); i++)
		{
			//if (returnTiles[i]->isActive)
				window.draw(returnTiles[i]->mHitbox);
		}

		// draw the map
		window.display();

		tree.Clear();

		for (int i = 0; i < inactiveTiles.size(); i++)
		{
			inactiveTiles[i]->activate();
		}

		inactiveTiles.clear();

	}

	return 0;
}
